Changelog:
4 May, 2016: 
Meged changes from aufaamirullah - this includes his Readme fix after reminding me that i probably SHOULD have a readme within the file
-includes a fix to how the program handles an empty list. Due to my edits, the program would no longer segfault when it was empty, but his changes did remind me that it will not tell the user that the list is empty. Props!
3 May, 2016:
-Final Update!I convereted every user input to a getline, so I could stop playing with cin.ignore. Expect no more unexpected freezes!
-Added a small set of sample recipes from text file. This program now requires "Recipe.txt" so please make sure you pull that as well. It is present in the root of the folder. 
-Finalized recipe management. You can now freely modify the directions list as well!
-Squashed as many bugs as I could possibly find, including many segment faults due to poor implementation of the algorithm -> Shouldn't have any more bugs as near as I can tell. If you find one, please submit it as an issue
2 May, 2016
-Commented out the code much better. Should be easier to understand what's going on!
30 April, 2016
-Added a .cpb file for users on the Virtual Machine after an error. I was using a newer version of Code::Blocks, which required a newer linux Library. If your version works, don't worry about it.
30 April, 2016
-Updated a readme instructions a bit. Make sure you are using C++11 standards! Now included in instructions.
-Changed wording in main a bit due to something I forgot to take out. (Doesn't affect functionality)

Big thanks to those who brought these all to my attention!

********* Reecipe Database *********

Welcome to my small, 'simple' recipe database! The functional goal of this project was less to make something interesting and cool (although I think it's pretty cool regardless), and more to learn a bit more to experiment with how C++ handles information (IE classes, structures, that type of thing.) The program has one simple goal: provide a simple, yet intuitive way to manage recipes. The key feature is to be able to change the amount of servings the recipe will make!

How to use:
If using code::blocks, make sure you are using C++11 standards! This is found in the settings as follows:
Settings -> Compiler -> Global Compiler Settings. Then, check the box that says "Have g++ follow the C++11 ISO C++ language standard." Then, from code::blocks, simply build the file and run!

If manually compiling, you will need 3 files: main.cpp, RecipeTable.cpp (found in /src/) and RecipeTable.h (found in /include/). Then to run, type the following "g++ -std=c++11 main.cpp RecipeTable.cpp FinalProject", followed by "./FinalProject". NOT recommended unless you know what you are doing!

If using code::blocks, ensure Recipes.txt is in the folder with main.cpp. If Compiling from terminal, make sure it lies in the same location you run the file from!

On startup, the program will display a menu. In this menu are 6 options. As it currently stands, there are zero options within the database. (Note: This will hopefully be addressed in a future version with a few sample recipes). First, add a recipe by pressing 1. It will prompt you for a quick readme (which will only appear once if necessary.) It will then prompt you for the name of a recipe you wish to add. After entering your recipe, it will prompt you for an ingredient. (Such as salt, tomatos, water, those types of things.) The program will then ask you for the quantity and units. This is asking for how much of the ingredient you are considering adding. So for example, if you entered salt for the previous step, then you would type "1 tbsp". It's important you input a number first, followed by a unit. Otherwise, the program can't adjust the portion size!

When you are finished adding ingredients, simply leave the ingredient input blank and press enter. The program will now prompt you to enter steps. Enter as many as you feel like, and when you are finished, press enter. Now, to access any part of the recipe, when returned to the main menu, press "search." It will prompt you for the recipe, and will return a success message if found.

Afterwards, a menu option will be available. Each one is self explanatory, and entering an ingredient is no different than it was before. You can view how many ingredients there are, and print the directions. Another option is to modify the serving sizes. For example, if it makes 4 servings, then entering "2" when prompted will cut all proportions in half!

You are also free to manage the directions list. Simply follow the directions, entering a direction number.

By pressing 8, you may return to the main menu. From the main menu, you can either delete any recipe, or print the entire contents of the database. The database will print it in alphabetical order. Nifty! When finished, simply press "5. Exit."

System Requirements:
This uses no libraries not found on any other system, so this project should run on any system. Best experienced on an operating system that respects your freedoms!

Group members:
Casey Cooter

Contributors:
Casey Cooter, aufaamirullah

Open Issues/Bugs/Features
I have a few more features I am planning on implementing.
-I want to enable people to import and export the database freely. What good is a program that needs to be running 24/7?
-Segfault after working with the ingredient list once in a whie. It's an isolated case, and I haven't been able to repeat it since. 

Bugs:
There are a few inputs that, when left blank, will more than likely cause the program to crash.

If you have a feature request/idea, don't hesitate to let it known!
